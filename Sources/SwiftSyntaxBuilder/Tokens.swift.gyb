%{
  from gyb_syntax_support import *
  from gyb_syntax_support.kinds import lowercase_first_word
  # -*- mode: Swift -*-
  # Ignore the following admonition it applies to the resulting .swift file only
}%
//// Automatically Generated From Tokens.swift.gyb.
//// Do Not Edit Directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2022 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

import SwiftSyntax

/// Namespace for commonly used tokens with default trivia.
public extension TokenSyntax {
% for token in SYNTAX_TOKENS:
%   if token.is_keyword:
  /// The `${token.text.encode('utf-8').decode('unicode_escape')}` keyword
  static var `${lowercase_first_word(token.name)}`: TokenSyntax {
    SyntaxFactory.make${token.name}Keyword()
%   if token.requires_leading_space:
    .withLeadingTrivia(.spaces(1))
%   end
%   if token.requires_trailing_space:
    .withTrailingTrivia(.spaces(1))
  }
%   end
%   elif token.text:
  /// The `${token.text.encode('utf-8').decode('unicode_escape')}` token
  static var `${lowercase_first_word(token.name)}`: TokenSyntax {
    SyntaxFactory.make${token.name}Token()
%   if token.requires_leading_space:
    .withLeadingTrivia(.spaces(1))
%   end
%   if token.requires_trailing_space:
    .withTrailingTrivia(.spaces(1))
%   end
  }
%   else:
  static func `${lowercase_first_word(token.name)}`(_ text: String) -> TokenSyntax {
    SyntaxFactory.make${token.name}(text)
%   if token.requires_leading_space:
    .withLeadingTrivia(.spaces(1))
%   end
%   if token.requires_trailing_space:
    .withTrailingTrivia(.spaces(1))
%   end
  }
%   end

% end
  /// The `eof` token
  static var eof: TokenSyntax {
    SyntaxFactory.makeToken(.eof, presence: .present)
  }
  /// The `open` token
  static var open: TokenSyntax {
        SyntaxFactory.makeContextualKeyword("open")
          .withTrailingTrivia(.spaces(1))
    }
}
